/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package rest;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import rest.dto.CourseDto;
import rest.dto.CreateCourseRequest;

import javax.validation.Valid;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-02T01:05:49.469+08:00[Asia/Shanghai]")

@Validated
@Api(value = "courses", description = "the courses API")
public interface CoursesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "创建专辑课程", nickname = "createCourse", notes = "需要在主站创建专辑，此时状态为【编辑中】", response = CreateCourseRequest.class, tags={ "Courses", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = CreateCourseRequest.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/courses",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CreateCourseRequest> createCourse(@ApiParam(value = "", required = true) @Valid @RequestBody CreateCourseRequest createCourseRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cover\" : \"cover\",  \"homepageRef\" : 5,  \"albumRef\" : 1,  \"price\" : 0.80082819046101150206595775671303272247314453125,  \"presenterRef\" : 6,  \"shortDesc\" : \"shortDesc\",  \"title\" : \"title\",  \"poster\" : \"poster\",  \"status\" : \"underReview\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "根据 课程id获取课程详情", nickname = "getCourseDetail", notes = "若已经同步到主站，详情包括同步补充信息", response = CourseDto.class, tags={ "Courses", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "操作成功", response = CourseDto.class),
        @ApiResponse(code = 404, message = "资源未找到", response = String.class) })
    @RequestMapping(value = "/courses/{courseId}",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<CourseDto> getCourseDetail(@ApiParam(value = "本地专辑课程id", required = true) @PathVariable("courseId") Long courseId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"cover\" : \"cover\",  \"homepageRef\" : 5,  \"albumRef\" : 5,  \"price\" : 6.02745618307040320615897144307382404804229736328125,  \"presenterRef\" : 1,  \"createdTime\" : \"2000-01-23\",  \"shortDesc\" : \"shortDesc\",  \"id\" : 0,  \"title\" : \"title\",  \"poster\" : \"poster\",  \"status\" : \"underReview\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
